                                                    
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПосчитатьСумму();	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьСумму()
   Строка = Элементы.Товары.ТекущиеДанные;
   Строка.Сумма = (Строка.Количество * Строка.Цена)-Строка.СуммаСкидки;

КонецПроцедуры // ()


&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПосчитатьСумму();
КонецПроцедуры


&НаКлиенте
Процедура Подбор(Команда)                     
    Если  НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
	    Сообщить("Введите дату документа для того, чтобы остатки на складе посчитались на указанную дату и время");
		Возврат;
	КонецЕсли;
	ПараметрыВызова = Новый Структура("Склад,ЗакрыватьПриВыборе",Объект.Склад,Ложь); 
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора",ПараметрыВызова,Элементы.Товары);
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//Найдем цену товара по срезу последних
	ЦенаТовара = УзнатьЦену(ВыбранноеЗначение); 	
	//добавим в нашу таблицу  Товары то, что выбрали
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ВыбранноеЗначение)); 
	Если НайденныеСтроки.Количество()>0 Тогда
		НайденнаяСтрока =  НайденныеСтроки[0];
		НайденнаяСтрока.Количество =  НайденныеСтроки[0].Количество +1;
		НайденнаяСтрока.Цена = ЦенаТовара;  
		НайденнаяСтрока.Сумма = НайденнаяСтрока.Количество * НайденнаяСтрока.Цена;
	Иначе
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = ВыбранноеЗначение;		
	    НоваяСтрока.Количество = 1; 
		НоваяСтрока.Цена =  ЦенаТовара;
		НоваяСтрока.Сумма =  НоваяСтрока.Количество * НоваяСтрока.Цена;

	КонецЕсли; 
	
    КонецПроцедуры

&НаСервере
Функция УзнатьЦену(СсылкаВыбранного) 
	Запрос = Новый Запрос();
	
	Запрос.ТЕкст = "ВЫБРАТЬ
	               |	ЦеныПродажиСрезПоследних.Цена КАК Цена
	               |ИЗ
	               |	РегистрСведений.ЦеныПродажи.СрезПоследних(&МоментВремени, Номенклатура = &СсылкаВыбранного) КАК ЦеныПродажиСрезПоследних";
	Запрос.УстановитьПараметр("СсылкаВыбранного",СсылкаВыбранного);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	   	Запрос.УстановитьПараметр("МоментВремени",Объект.Ссылка.моментВремени());
	Иначе
		Запрос.УстановитьПараметр("МоментВремени",Объект.Дата);	
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если  Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий() ;
		Возврат Выборка.Цена; 
	КонецЕсли;
КонецФункции // УзнатьЦену()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Переопределяемый.ПриСозданииНаСервере(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаСоСкидкойПриИзменении(Элемент)
  Строка = Элементы.Товары.ТекущиеДанные;
  ПересчитатьПроцентСкидки(Строка);
  ПересчитатьСуммуСкидки(Строка);
  ПосчитатьСумму();
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
  Строка = Элементы.Товары.ТекущиеДанные;
  Строка.ЦенаСоСкидкой = Строка.Цена-(Строка.Цена * Строка.ПроцентСкидки/100);
  ПересчитатьСуммуСкидки(Строка);
  ПосчитатьСумму();
КонецПроцедуры 

 &НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
  Строка = Элементы.Товары.ТекущиеДанные;
  Если Строка.СуммаСкидки>=Строка.Сумма Тогда
     Сообщить ("Сумма скидки должна быть меньше суммы");
	 Возврат;
  КонецЕсли;
  Строка.ЦенаСоСкидкой = (Строка.Сумма-Строка.СуммаСкидки)/Строка.Количество; 
 ПересчитатьПроцентСкидки(Строка); 
  ПосчитатьСумму();
КонецПроцедуры 


  &НаКлиенте
  Процедура ПересчитатьСуммуСкидки(Строка)
	  Строка.СуммаСкидки = (Строка.Цена - Строка.ЦенаСоСкидкой)*Строка.Количество;
  КонецПроцедуры  
  
  &НаКлиенте
  Процедура ПересчитатьПроцентСкидки(Строка)	  
	  Строка.ПроцентСкидки = ((Строка.Цена - Строка.ЦенаСоСкидкой)/Строка.Цена) * 100;
  КонецПроцедуры  
  
  
	